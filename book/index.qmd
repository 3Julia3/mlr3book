# Preamble {.unnumbered}
{{< include _setup.qmd >}}
```{r C0 seed}
set.seed(0)
```

Welcome to the Machine Learning in R 3 universe (mlr3verse), let us show you some of its magic.
Before we begin, make sure you have installed mlr3 if you want to follow along, we recommend installing the full universe at once:

```{r C0 install mlr3verse, eval = FALSE}
install.packages("mlr3verse")
```

You can also just install the base package:

```{r C0 install mlr3, eval = FALSE}
install.packages("mlr3")
```

In this first example we'll show you the most basic use-case, train and predict.

```{r C0 egBasic}
library("mlr3")
task = tsk("penguins")
split = partition(task)
learner = lrn("classif.rpart", predict_type = "prob")

learner$train(task, row_ids = split$train)
learner$model

predictions = learner$predict(task, row_ids = split$test)
predictions

predictions$score(msr("classif.acc"))
```

Here we have picked the 'penguins' task (which is mlr3 language for dataset), randomly split the task into 67% training data and 33% testing data, trained a random forest on the training data to learn the probability of an observation falling into one of the outcome classes, showed the fitted model, and then made prediction on the test data, showed these predictions and evaluated the model using the accuracy measure.

Whilst mlr3 makes training and predicting easy, it also uses a unified interface to perform some very complex operations in just a few lines of code:

```{r C0 egHard, output = FALSE}
library(mlr3verse)
library(mlr3pipelines)
library(mlr3benchmark)

tasks = tsks(c("breast_cancer", "sonar"))
tuned_rf = auto_tuner(
    tnr("grid_search", resolution = 5),
    lrn("classif.ranger", num.trees = to_tune(200, 500)),
    rsmp("holdout")
)
tuned_rf = pipeline_robustify(NULL, tuned_rf, TRUE) %>>%
    po("learner", tuned_rf)
stack_lrn = ppl(
    "stacking",
    base_learners = lrns(c("classif.rpart", "classif.kknn")),
    lrn("classif.log_reg"))
stack_lrn = pipeline_robustify(NULL, stack_lrn, TRUE) %>>%
    po("learner", stack_lrn)

learners = c(tuned_rf, stack_lrn)
bm = benchmark(benchmark_grid(tasks, learners, rsmp("holdout")))
```

```{r C0 egHardOut}
bma = bm$aggregate(msr("classif.acc"))[, c("task_id", "learner_id", "classif.acc")]
bma$learner_id = rep(c("RF", "Stack"), 2)
bma

as.BenchmarkAggr(bm)$friedman_test()
```

In this (much more complex!) example we picked two tasks, three machine learning algorithms ('learners'), and compared their performance. We demonstrated using automated tuning to optimise the number of trees in a random forest (Chapter 4), as well as pipelines to impute missing data, collapse factor levels and to create stacked models (Chapter 5). We also showed basic features like loading learners (Chapter 2) and picking resampling strategies for benchmarking (Chapter 3). Finally we compared the performance of the models using the sample mean and then use statistical tests to see if one model performed significantly better than another (they did not!).

You will learn all this and more by reading this book and we will take it slow to make sure you understand the components that make this universe run. There are a few different ways you can use this book and we will explain them in this preamble, as well as useful links, citaton information, and syntax. First, thank you for joining us on this journey, we hope you will love our software as much as we do.

## How to use this book {#howtouse}

* Technical details
* Extending
* Special tasks
* Exercises
* Symbols: difficult, optional, references

## Installation guidelines {#installguide}

All packages in the mlr3 ecosystem can be installed from GitHub and R-Universe and the majority (but not all) can be installed from CRAN. We recommend adding the mlr-org R-universe[^runiverse] to your R options so that you can install all packages with `install.packages()` without having to worry whether it's being downloaded from CRAN or R-universe. To do this run the following:

[^runiverse]: R-universe is simply an alternative package repository to CRAN. The bit of code below tells R to look at R-universe, as well as CRAN, when trying to install packages. R will always install the latest version of a package.

```{r universe1, eval = FALSE}
usethis::edit_r_profile()
```

And in the file that opens add or change the `repos` argument in `options` so it looks something like this (you might need to add the full code block below or just edit the existing `options` function).

```{r universe2, eval = FALSE}
options(repos = c(
       mlrorg = "https://mlr-org.r-universe.dev",
       CRAN = "https://cloud.r-project.org/"
))
```

Save the file then restart your R session and you're ready to go!

If you want latest development versions of any of our packages you can just run

```{r remotes, eval = FALSE}
remotes::install_github("mlr-org/{pkg}")
```

with `{pkg}` replaced by the package you want to install. You can see an up-to-date list of all our extension packages at https://github.com/mlr-org/mlr3/wiki/Extension-Packages.

## Community links

* Mattermost
* Call to action for contributiors, developers, etc.
* mlr3 links
* Internships?
* Issue trackers (where and how)
* How to contribute

## Citation info {#citeus}

Every package in the mlr3verse has its own citation details that can be found on the respective GitHub repository.

To reference this book please use:

```
Becker M, Binder M, Bischl B, Foss N, Kotthoff L, Lang M, Pfisterer F,
Reich N G, Richter J, Schratz P, Sonabend R, Pulatov D.
`r strftime(Sys.Date(), "%Y")`. "{{< meta title >}}". https://mlr3book.mlr-org.com.
```

```
@misc{
  title = {{< meta title >}}
  author = {Marc Becker, Martin Binder, Bernd Bischl, Natalie Foss,
  Lars Kotthoff, Michel Lang, Florian Pfisterer, Nicholas G. Reich,
  Jakob Richter, Patrick Schratz, Raphael Sonabend, Damir Pulatov},
  url = {https://mlr3book.mlr-org.com},
  year = {`r strftime(Sys.Date(), "%Y")`}
}
```

To reference the `r mlr_pkg("mlr3")` package, please cite our JOSS paper:

```
Lang M, Binder M, Richter J, Schratz P, Pfisterer F, Coors S, Au Q,
Casalicchio G, Kotthoff L, Bischl B (2019). “mlr3: A modern object-oriented
machine learning framework in R.” Journal of Open Source Software.
doi: 10.21105/joss.01903.
```

```{r citation-001, echo = FALSE}
print(citation("mlr3"), style = "bibtex")
```

## mlr3 styleguide {#styleguide}

Throughout this book we will use our own style guide that can be found in the Wiki of the mlr3 GitHub repo at https://github.com/mlr-org/mlr3/wiki/Style-Guide. Below are the most important style choices relevant to the book, we only list and do not explain the choices.

1. We always use `=` instead of `<-` for assignment.
2. Class names are in `UpperCamelCase`
3. Function and method names are in `lower_snake_case`
4. We write packages, fields, methods, functions as follows:

* `package`
* `package::function()` (for functions _outside_ the mlr-org ecosystem)
* `function()` (for functions _inside_ the mlr-org ecosystem)
* `$field`
* `$method()`


* Key style choices

## Sugar and R6 {#sugar}

* What is R6 - overview and intro
* What is sugar?
* Usage in mlr3 and this book

<!-- :::{.callout-tip}
A collection of use cases and examples can be found in the [mlr3gallery](https://mlr-org.com/gallery) on our [website](https://mlr-org.com).

We highly recommend to take a look at our `r mlr_pkg("cheatsheets")` while diving deeper into `r mlr_pkg("mlr3")`.
::: -->
